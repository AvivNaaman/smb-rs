//! Compressed messages

use crate::packets::binrw_util::prelude::*;

use super::negotiate::CompressionAlgorithm;
use binrw::io::TakeSeekExt;
use binrw::prelude::*;

#[binrw::binrw]
#[derive(Debug, PartialEq, Eq)]
pub enum CompressedMessage {
    Unchained(CompressedUnchainedHeader),
    Chained(CompressedChainedHeader),
}

#[binrw::binrw]
#[derive(Debug, PartialEq, Eq)]
#[brw(magic(b"\xfcSMB"), little)]
pub struct CompressedUnchainedHeader {
    original_compressed_segment_size: u32,
    // The same as the negotiation, but must be set.
    #[brw(assert(!matches!(compression_algorithm, CompressionAlgorithm::None)))]
    compression_algorithm: CompressionAlgorithm,
    #[br(assert(flags == 0))]
    #[bw(calc = 0)]
    flags: u16,
    offset: u32,
}

#[binrw::binrw]
#[derive(Debug, PartialEq, Eq)]
#[brw(magic(b"\xfcSMB"), little)]
pub struct CompressedChainedHeader {
    original_compressed_segment_size: u32,
    #[br(parse_with = binrw::helpers::until_eof)]
    items: Vec<CompressedChainedItem>,
}

#[binrw::binrw]
#[derive(Debug, PartialEq, Eq)]
pub struct CompressedChainedItem {
    compression_algorithm: CompressionAlgorithm,
    flags: u16,
    #[bw(calc = PosMarker::default())]
    length: PosMarker<u32>,
    // Only present if algorithms require it.
    #[brw(if(compression_algorithm.original_payload_size_required()))]
    original_payload_size: Option<u32>,
    #[br(map_stream = |s| s.take_seek(length.value.into()), args(&compression_algorithm))]
    #[bw(write_with = PosMarker::write_size, args(&length))]
    payload_data: CompressedChainedData,
}

#[binrw::binrw]
#[derive(Debug, PartialEq, Eq)]
#[br(import(compression_algorithm: &CompressionAlgorithm))]
pub enum CompressedChainedData {
    #[br(pre_assert(matches!(compression_algorithm, CompressionAlgorithm::PatternV1)))]
    PatternV1Payload(PatternV1Payload),
    Data(CompressedData),
}

#[binrw::binrw]
#[derive(Debug, PartialEq, Eq)]
pub struct PatternV1Payload {
    pattern: u8,
    #[bw(calc = 0)]
    #[br(assert(reserved1 == 0))]
    reserved1: u8,
    #[bw(calc = 0)]
    #[br(assert(reserved2 == 0))]
    reserved2: u16,
    repetitions: u32,
}

#[binrw::binrw]
#[derive(Debug, PartialEq, Eq)]
pub struct CompressedData {
    #[br(parse_with = binrw::helpers::until_eof)]
    data: Vec<u8>,
}

#[cfg(test)]
pub mod tests {
    use std::io::Cursor;

    use super::*;

    #[test]
    pub fn test_compressed_data_chained_parses() {
        let data_bytes = [
            0xfcu8, 0x53, 0x4d, 0x42, 0x70, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x68, 0x0, 0x0, 0x0,
            0xfe, 0x53, 0x4d, 0x42, 0x40, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x1, 0x0,
            0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff,
            0xfe, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x7d, 0x0, 0x0, 0x28, 0x0, 0x30, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x29, 0x0,
            0x1, 0xf, 0x2a, 0x2, 0x0, 0x0, 0x68, 0x0, 0x0, 0x0, 0x8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x3, 0x0, 0x0, 0x0, 0xee, 0x5, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x8d, 0x0, 0x0, 0x0,
            0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0xb9, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x15, 0x24, 0x4d, 0x70, 0x45, 0x61, 0x5f, 0x44, 0x32, 0x36, 0x32, 0x41, 0x43, 0x36,
            0x32, 0x34, 0x34, 0x35, 0x31, 0x32, 0x39, 0x35, 0x4, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0xee, 0x0, 0x0, 0x0,
        ];

        let mut cursor = Cursor::new(data_bytes);

        assert_eq!(
            CompressedMessage::read_le(&mut cursor).unwrap(),
            CompressedMessage::Chained(CompressedChainedHeader {
                original_compressed_segment_size: 368,
                items: vec![
                    CompressedChainedItem {
                        compression_algorithm: CompressionAlgorithm::None,
                        flags: 1,
                        original_payload_size: None,
                        payload_data: CompressedChainedData::Data(CompressedData {
                            data: [
                                0xfe, 0x53, 0x4d, 0x42, 0x40, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0,
                                0x10, 0x0, 0x1, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x91,
                                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xfe, 0x0, 0x0, 0x1, 0x0,
                                0x0, 0x0, 0x7d, 0x0, 0x0, 0x28, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0,
                                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                0x29, 0x0, 0x1, 0xf, 0x2a, 0x2, 0x0, 0x0, 0x68, 0x0, 0x0, 0x0, 0x8,
                                0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0xee, 0x5,
                                0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x8d, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0,
                                0x0
                            ]
                            .to_vec()
                        })
                    },
                    CompressedChainedItem {
                        compression_algorithm: CompressionAlgorithm::None,
                        flags: 0xb975,
                        original_payload_size: None,
                        payload_data: CompressedChainedData::Data(CompressedData {
                            data: [
                                0x0, 0x0, 0x0, 0x0, 0x15, 0x24, 0x4d, 0x70, 0x45, 0x61, 0x5f, 0x44,
                                0x32, 0x36, 0x32, 0x41, 0x43, 0x36, 0x32, 0x34, 0x34, 0x35, 0x31,
                                0x32, 0x39, 0x35
                            ]
                            .to_vec()
                        })
                    },
                    CompressedChainedItem {
                        compression_algorithm: CompressionAlgorithm::PatternV1,
                        flags: 0,
                        original_payload_size: None,
                        payload_data: CompressedChainedData::PatternV1Payload(PatternV1Payload {
                            pattern: 0,
                            repetitions: 238
                        })
                    }
                ]
            })
        );
    }

    #[test]
    pub fn test_compressed_data_chained_write() {
        let value = CompressedMessage::Chained(CompressedChainedHeader {
            original_compressed_segment_size: 368,
            items: vec![
                CompressedChainedItem {
                    compression_algorithm: CompressionAlgorithm::None,
                    flags: 1,
                    original_payload_size: None,
                    payload_data: CompressedChainedData::Data(CompressedData {
                        data: [
                            0xfe, 0x53, 0x4d, 0x42, 0x40, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10,
                            0x0, 0x1, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x3, 0x0,
                            0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xfe, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x9,
                            0x0, 0x0, 0x2c, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x29, 0x0, 0x1, 0xf, 0x2a,
                            0x2, 0x0, 0x0, 0x68, 0x0, 0x0, 0x0, 0x8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0,
                            0x0, 0x3, 0x0, 0x0, 0x0, 0x11, 0x7, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x69,
                            0x0, 0x20, 0x0, 0xc, 0x0, 0x0, 0x0,
                        ]
                        .to_vec(),
                    }),
                },
                CompressedChainedItem {
                    compression_algorithm: CompressionAlgorithm::None,
                    flags: 0,
                    original_payload_size: None,
                    payload_data: CompressedChainedData::Data(CompressedData {
                        data: [
                            0x0, 0x0, 0x0, 0x0, 0x15, 0x24, 0x4d, 0x70, 0x45, 0x61, 0x5f, 0x44,
                            0x32, 0x36, 0x32, 0x41, 0x43, 0x36, 0x32, 0x34, 0x34, 0x35, 0x31, 0x32,
                            0x39, 0x35,
                        ]
                        .to_vec(),
                    }),
                },
                CompressedChainedItem {
                    compression_algorithm: CompressionAlgorithm::PatternV1,
                    flags: 0,
                    original_payload_size: None,
                    payload_data: CompressedChainedData::PatternV1Payload(PatternV1Payload {
                        pattern: 0,
                        repetitions: 238,
                    }),
                },
            ],
        });

        let mut cursor = Cursor::new(Vec::new());
        value.write_le(&mut cursor).unwrap();

        assert_eq!(
            cursor.into_inner(),
            [
                0xfc, 0x53, 0x4d, 0x42, 0x70, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x68, 0x0, 0x0,
                0x0, 0xfe, 0x53, 0x4d, 0x42, 0x40, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0,
                0x1, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x3, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0xff, 0xfe, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x2c, 0x0, 0x30,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x29, 0x0, 0x1, 0xf, 0x2a, 0x2, 0x0, 0x0, 0x68, 0x0, 0x0, 0x0, 0x8, 0x1,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x11, 0x7, 0x0, 0x0, 0xc, 0x0,
                0x0, 0x0, 0x69, 0x0, 0x20, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1a, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0x24, 0x4d, 0x70, 0x45, 0x61, 0x5f, 0x44, 0x32,
                0x36, 0x32, 0x41, 0x43, 0x36, 0x32, 0x34, 0x34, 0x35, 0x31, 0x32, 0x39, 0x35, 0x4,
                0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x0, 0x0, 0x0
            ]
        );
    }
}
